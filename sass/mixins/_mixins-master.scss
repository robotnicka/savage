// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

// for object fit polyfill
//
// This mixin can be used to set the object-fit:
// @include object-fit(contain);
// or object-fit and object-position:
// @include object-fit(cover, top);
//
@mixin object-fit($fit: fill, $position: null) {
    -o-object-fit: $fit;
    object-fit: $fit;

    @if $position {
        font-family: 'object-fit: #{$fit}; object-position: #{$position}';
        -o-object-position: $position;
        object-position: $position;
    }

    @else {
        font-family: 'object-fit: #{$fit}';
    }
}

// Set image container with object fit and choose from a selection of predefined ratios
@mixin image-ratio($size) {
    position: relative;
    height: 0;

    @if $size == object-fit--square {
        // Ratio 1:1
        padding-bottom: 100%;
    }

    @else if $size == object-fit--double {
        // Ratio 2:1
        padding-bottom: 50%;
    }
    
    @else if $size == object-fit--wide {
        // Ratio 16:9
        padding-bottom: percentage(9 / 16);
    }

    @else if $size == object-fit--classic {
        // Ratio 3:2
        padding-bottom: percentage(2 / 3);
    }

    @else {
        padding-bottom: 100%;
    }

    img {
        @include object-fit(cover);
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
}
